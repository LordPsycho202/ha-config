---
type: custom:mushroom-chips-card
card_mod:
  class: middle-blank
  style:
    .: |
      ha-card > * {
        font-family: Antonio;
      }
chips:
  - type: weather
    entity: weather.weather_station
    show_temperature: true
    show_conditions: false

  - type: conditional
    conditions:
      - entity: binary_sensor.wx_card
        state: "on"
    chip:
      type: template
      entity: sensor.nws_alerts
      tap_action:
        action: navigate
        navigation_path: wxalert
      icon_color: |-
        {%- set ns = namespace(output="white") %}
        {%- if states.sensor.nws_alerts.state | int > 0 %}
          {%- set description = states.sensor.nws_alerts.attributes.display_desc.split("\n\n-\n\n") %}
          {%- for desc in description %}
            {%- set expires = as_timestamp((desc.split("Expires: ")[1]).split("\nDescription")[0]) %}
            {%- if as_timestamp(now()) < expires %}
              {% set severity = states.sensor.nws_alerts.attributes.event_severity.split(" - ")[loop.index0] %}
              {%- if severity == "Extreme" %}
                {%- set ns.output = "red" %}
              {% elif severity == "Severe" %}
                {%- set ns.output = "yellow" %}
              {%- endif %}
            {%- endif %}
          {%- endfor %}
        {%- endif %}
        {{ ns.output }}
      content: |-
        {%- set ns = namespace(count = 0,index=0) %}
        {%- if states.sensor.nws_alerts.state | int > 0 %}
          {%- set description = states.sensor.nws_alerts.attributes.display_desc.split("\n\n-\n\n") %}
          {%- for desc in description %}
            {%- set expires = as_timestamp((desc.split("Expires: ")[1]).split("\nDescription")[0]) %}
            {%- if as_timestamp(now()) < expires %}
              {%- set ns.count = ns.count+1 %}
              {%- set ns.index = loop.index0 %}
            {%- endif %}
          {%- endfor %}
        {%- endif %}
        {%- if ns.count > 1 %}
          {{ns.count}} NWS Alerts
        {%- else %}
          {{states.sensor.nws_alerts.attributes.title.split(" - ")[ns.index]}}
        {%- endif %}
      icon: "{{states.sensor.nws_alerts.attributes.icon}}"

  - type: conditional
    conditions:
      - entity: binary_sensor.drought_card
        state: "on"
    chip:
      type: template
      icon_color: white
      content: >-
        Days Without Rain: {{ states.counter.days_without_rain.state }}
      icon: "{{ states.counter.days_without_rain.attributes.icon }}"

  - type: conditional
    conditions:
      - entity: binary_sensor.wind_chill_active
        state: "on"
    chip:
      type: template
      icon_color: white
      content: >-
        Wind Chill:
        {{states.sensor.wind_chill.state}}{{states.sensor.wind_chill.attributes.unit_of_measurement}}
      icon: "{{ states.sensor.wind_chill.attributes.icon }}"

  - type: conditional
    conditions:
      - entity: binary_sensor.heat_index_active
        state: "on"
    chip:
      type: template
      icon_color: white
      content: "Heat Index: {{states.sensor.heat_index.state}}F"
      icon: "{{states.sensor.heat_index.attributes.icon}}"
      tap_action:
        action: navigate
        navigation_path: weather

  - type: conditional
    conditions:
      - entity: binary_sensor.is_snow
        state: "on"
    chip:
      type: template
      content: Snowing
      icon: mdi:weather-snowy

  - type: conditional
    conditions:
      - entity: binary_sensor.is_rain_2
        state: "on"
    chip:
      type: template
      content: Raining
      icon: mdi:weather-pouring
      tap_action:
        action: navigate
        navigation_path: weather

  - type: spacer

  - type: conditional
    conditions:
      - entity: input_select.mail_status
        state: "Mail Delivered"
    chip:
      type: template
      icon_color: white
      content: Mail
      tap_action:
        action: navigate
        navigation_path: mailalert
      icon: mdi:mail

  - type: conditional
    conditions:
      - entity: input_boolean.package_present
        state: "on"
    chip:
      type: template
      icon_color: white
      content: Packages
      tap_action:
        action: navigate
        navigation_path: mailalert
      icon: mdi:package-check

  - type: conditional
    conditions:
      - entity: calendar.trash_collection
        state: "on"
    chip:
      type: template
      icon_color: white
      content: Trash
      icon: mdi:delete

  - type: conditional
    conditions:
      - entity: calendar.recycling_collection
        state: "on"
    chip:
      type: template
      icon_color: white
      content: Recycling
      icon: mdi:recycle-variant

  - type: conditional
    conditions:
      - entity: input_boolean.vacation_mode
        state: "on"
    chip:
      type: template
      icon_color: white
      content: Vacation Mode On
      icon: mdi:airplane-check

  - type: conditional
    conditions:
      - entity: input_boolean.guest_mode
        state: "on"
    chip:
      type: template
      icon_color: white
      content: Guest Mode On
      icon: mdi:bed

  - type: conditional
    conditions:
      - entity: vacuum.philoctetes
        state: error
    chip:
      type: template
      icon_color: white
      content: Philoctetes
      icon: mdi:alert

  - type: conditional
    conditions:
      - entity: vacuum.catbug
        state: error
    chip:
      type: template
      icon_color: white
      content: Catbug
      icon: mdi:alert

  - type: conditional
    conditions:
      - entity: input_select.dishwasher_state
        state: Clean
    chip:
      type: template
      icon_color: white
      content: Dishwasher Done
      icon: mdi:dishwasher
      tap_action:
        action: call-service
        service: input_select.select_option
        target:
          entity_id: input_select.dishwasher_state
        data:
          option: Dirty

  - type: conditional
    conditions:
      - condition: state
        entity: plant.front_planter
        state_not: ok
    chip:
      type: template
      icon: |-
        {% if 'moisture low' in state_attr('plant.front_planter','problem') %}
        mdi:watering-can-outline
        {% elif 'moisture high' in state_attr('plant.front_planter','problem') %}
        mdi:water-alert
        {% elif 'temperature low' in state_attr('plant.front_planter','problem') %}
        mdi:snowflake-thermometer
        {% elif 'temperature high' in state_attr('plant.front_planter','problem') %}
        mdi:sun-thermometer-outline
        {% else %}
        mdi:sprout-outline
        {% endif %}
      content: Front Planter
      entity: plant.front_planter
      tap_action:
        action: navigate
        navigation_path: garden

  - type: conditional
    conditions:
      - condition: state
        entity: plant.planter_1
        state_not: ok
    chip:
      type: template
      icon: |-
        {% if 'moisture low' in state_attr('plant.planter_1','problem') %}
        mdi:watering-can-outline
        {% elif 'moisture high' in state_attr('plant.planter_1','problem') %}
        mdi:water-alert
        {% elif 'temperature low' in state_attr('plant.planter_1','problem') %}
        mdi:snowflake-thermometer
        {% elif 'temperature high' in state_attr('plant.planter_1','problem') %}
        mdi:sun-thermometer-outline
        {% else %}
        mdi:sprout-outline
        {% endif %}
      content: Planter 1 (Herbs)
      entity: plant.planter_1
      tap_action:
        action: navigate
        navigation_path: garden

  - type: conditional
    conditions:
      - condition: state
        entity: plant.planter_2
        state_not: ok
    chip:
      type: template
      entity: plant.planter_2
      icon: |-
        {% if 'moisture low' in state_attr('plant.planter_2','problem') %}
        mdi:watering-can-outline
        {% elif 'moisture high' in state_attr('plant.planter_2','problem') %}
        mdi:water-alert
        {% elif 'temperature low' in state_attr('plant.planter_2','problem') %}
        mdi:snowflake-thermometer
        {% elif 'temperature high' in state_attr('plant.planter_2','problem') %}
        mdi:sun-thermometer-outline
        {% else %}
        mdi:sprout-outline
        {% endif %}
      content: Planter 2 (Collards)
      tap_action:
        action: navigate
        navigation_path: garden

  - type: conditional
    conditions:
      - condition: state
        entity: plant.pineapples
        state_not: ok
    chip:
      type: template
      entity: plant.pineapples
      icon: |-
        {% if 'moisture low' in state_attr('plant.pineapples','problem') %}
        mdi:watering-can-outline
        {% elif 'moisture high' in state_attr('plant.pineapples','problem') %}
        mdi:water-alert
        {% elif 'temperature low' in state_attr('plant.pineapples','problem') %}
        mdi:snowflake-thermometer
        {% elif 'temperature high' in state_attr('plant.pineapples','problem') %}
        mdi:sun-thermometer-outline
        {% else %}
        mdi:sprout-outline
        {% endif %}
      content: Pineapple Pots
      tap_action:
        action: navigate
        navigation_path: garden

  - type: conditional
    conditions:
      - condition: state
        entity: plant.seeds
        state_not: ok
    chip:
      type: template
      entity: plant.seeds
      icon: |-
        {% if 'moisture low' in state_attr('plant.seeds','problem') %}
        mdi:watering-can-outline
        {% elif 'moisture high' in state_attr('plant.seeds','problem') %}
        mdi:water-alert
        {% elif 'temperature low' in state_attr('plant.seeds','problem') %}
        mdi:snowflake-thermometer
        {% elif 'temperature high' in state_attr('plant.seeds','problem') %}
        mdi:sun-thermometer-outline
        {% else %}
        mdi:sprout-outline
        {% endif %}
      content: Seed Trays
      tap_action:
        action: navigate
        navigation_path: garden

  - type: conditional
    conditions:
      - entity: input_select.cat_litter_full_clean
        state_not: Done
    chip:
      type: template
      icon: mdi:cat
      icon_color: white
      content: "Empty: {{ states.input_select.cat_litter_full_clean.state }}"
      tap_action:
        action: call-service
        service: input_select.select_option
        target:
          entity_id: input_select.cat_litter_full_clean
        data:
          option: Done
